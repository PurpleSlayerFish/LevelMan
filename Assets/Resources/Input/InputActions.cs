//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Resources/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""New action map1"",
            ""id"": ""1a08080f-1634-416b-aef6-8ddacedb1ad1"",
            ""actions"": [
                {
                    ""name"": ""VerticalAxis"",
                    ""type"": ""Button"",
                    ""id"": ""fa067176-93de-4a05-a491-399f8067e18b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HorizontalAxis"",
                    ""type"": ""Button"",
                    ""id"": ""12851e32-96f2-498c-b324-d1155c773c3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""6a980528-6037-47f3-9400-8745bf500ff8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionMain"",
                    ""type"": ""Button"",
                    ""id"": ""5034d72a-6f93-412d-acac-4b9388a8040b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionSecond"",
                    ""type"": ""Button"",
                    ""id"": ""95461f15-046d-4dbe-a4be-f39b37036f36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""c045b84f-1987-4192-94a4-70dbddb01576"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fbe7ac68-02f4-4186-94ec-f126cd4ccba1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Hold,Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""866f9ba8-741c-4b3d-9875-01049b5e21cd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""VerticalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f59c3ab1-26d0-4870-95aa-efcd8ee162f8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""VerticalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""973644cc-9e9d-4f12-8af5-643d9d7d8185"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Hold,Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a51825eb-ecc2-4013-b7bb-140de8ac474c"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""HorizontalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0513fc99-5906-4321-9f66-d17748d56a2c"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""HorizontalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""413da58d-91ed-491b-afdf-42c93dcd1913"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa723fb7-5f03-46ba-94c1-1e86f2286fc7"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""ActionMain"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d69dd2e-228f-4370-b140-2446bfe2146b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""ActionSecond"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f6849b9-8fe8-43ce-a284-f6f218da21e1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DefaultScheme"",
            ""bindingGroup"": ""DefaultScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // New action map1
        m_Newactionmap1 = asset.FindActionMap("New action map1", throwIfNotFound: true);
        m_Newactionmap1_VerticalAxis = m_Newactionmap1.FindAction("VerticalAxis", throwIfNotFound: true);
        m_Newactionmap1_HorizontalAxis = m_Newactionmap1.FindAction("HorizontalAxis", throwIfNotFound: true);
        m_Newactionmap1_Escape = m_Newactionmap1.FindAction("Escape", throwIfNotFound: true);
        m_Newactionmap1_ActionMain = m_Newactionmap1.FindAction("ActionMain", throwIfNotFound: true);
        m_Newactionmap1_ActionSecond = m_Newactionmap1.FindAction("ActionSecond", throwIfNotFound: true);
        m_Newactionmap1_Attack = m_Newactionmap1.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // New action map1
    private readonly InputActionMap m_Newactionmap1;
    private List<INewactionmap1Actions> m_Newactionmap1ActionsCallbackInterfaces = new List<INewactionmap1Actions>();
    private readonly InputAction m_Newactionmap1_VerticalAxis;
    private readonly InputAction m_Newactionmap1_HorizontalAxis;
    private readonly InputAction m_Newactionmap1_Escape;
    private readonly InputAction m_Newactionmap1_ActionMain;
    private readonly InputAction m_Newactionmap1_ActionSecond;
    private readonly InputAction m_Newactionmap1_Attack;
    public struct Newactionmap1Actions
    {
        private @InputActions m_Wrapper;
        public Newactionmap1Actions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @VerticalAxis => m_Wrapper.m_Newactionmap1_VerticalAxis;
        public InputAction @HorizontalAxis => m_Wrapper.m_Newactionmap1_HorizontalAxis;
        public InputAction @Escape => m_Wrapper.m_Newactionmap1_Escape;
        public InputAction @ActionMain => m_Wrapper.m_Newactionmap1_ActionMain;
        public InputAction @ActionSecond => m_Wrapper.m_Newactionmap1_ActionSecond;
        public InputAction @Attack => m_Wrapper.m_Newactionmap1_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Newactionmap1Actions set) { return set.Get(); }
        public void AddCallbacks(INewactionmap1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Add(instance);
            @VerticalAxis.started += instance.OnVerticalAxis;
            @VerticalAxis.performed += instance.OnVerticalAxis;
            @VerticalAxis.canceled += instance.OnVerticalAxis;
            @HorizontalAxis.started += instance.OnHorizontalAxis;
            @HorizontalAxis.performed += instance.OnHorizontalAxis;
            @HorizontalAxis.canceled += instance.OnHorizontalAxis;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @ActionMain.started += instance.OnActionMain;
            @ActionMain.performed += instance.OnActionMain;
            @ActionMain.canceled += instance.OnActionMain;
            @ActionSecond.started += instance.OnActionSecond;
            @ActionSecond.performed += instance.OnActionSecond;
            @ActionSecond.canceled += instance.OnActionSecond;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(INewactionmap1Actions instance)
        {
            @VerticalAxis.started -= instance.OnVerticalAxis;
            @VerticalAxis.performed -= instance.OnVerticalAxis;
            @VerticalAxis.canceled -= instance.OnVerticalAxis;
            @HorizontalAxis.started -= instance.OnHorizontalAxis;
            @HorizontalAxis.performed -= instance.OnHorizontalAxis;
            @HorizontalAxis.canceled -= instance.OnHorizontalAxis;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @ActionMain.started -= instance.OnActionMain;
            @ActionMain.performed -= instance.OnActionMain;
            @ActionMain.canceled -= instance.OnActionMain;
            @ActionSecond.started -= instance.OnActionSecond;
            @ActionSecond.performed -= instance.OnActionSecond;
            @ActionSecond.canceled -= instance.OnActionSecond;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(INewactionmap1Actions instance)
        {
            if (m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewactionmap1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Newactionmap1Actions @Newactionmap1 => new Newactionmap1Actions(this);
    private int m_DefaultSchemeSchemeIndex = -1;
    public InputControlScheme DefaultSchemeScheme
    {
        get
        {
            if (m_DefaultSchemeSchemeIndex == -1) m_DefaultSchemeSchemeIndex = asset.FindControlSchemeIndex("DefaultScheme");
            return asset.controlSchemes[m_DefaultSchemeSchemeIndex];
        }
    }
    public interface INewactionmap1Actions
    {
        void OnVerticalAxis(InputAction.CallbackContext context);
        void OnHorizontalAxis(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnActionMain(InputAction.CallbackContext context);
        void OnActionSecond(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
