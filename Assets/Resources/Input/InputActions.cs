//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Resources/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""KM"",
            ""id"": ""9883ef32-aa50-420c-a233-fbb2adddbab1"",
            ""actions"": [
                {
                    ""name"": ""VerticalAxis"",
                    ""type"": ""Button"",
                    ""id"": ""7e7c90a7-b6ee-4c7e-8608-98d1639c8cc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HorizontalAxis"",
                    ""type"": ""Button"",
                    ""id"": ""8f3ab89a-cf0d-4329-a0ff-227108e25efe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""32007114-1d33-404c-8537-a7add1c3e5fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionMain"",
                    ""type"": ""Button"",
                    ""id"": ""ee1df662-a7d1-4cf0-8b61-41a7a37dc0d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionSecond"",
                    ""type"": ""Button"",
                    ""id"": ""16d44631-7d0a-46ac-a5ba-c5a0da4721db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""e937376c-b08c-4872-b236-e22b01684f35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""126f220d-bb91-44b8-a8ef-6d1480a08563"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Hold,Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ab76f7d5-9624-457c-b04f-099e625bb388"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""VerticalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""78e8d051-f999-47f8-b57a-2350e4ce02e9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""VerticalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2ce9af30-d150-4f55-90ab-e31e7aec5340"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Hold,Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3cfd610b-b353-4683-9814-b0fd8edcb332"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""HorizontalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e8a54f79-7871-4a91-aeb9-ddd21c2719be"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""HorizontalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c2f66801-c617-49b2-829f-a8d4c807dcc4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e20720e-f97a-409e-a5ff-a9bc0bb6bb09"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""ActionMain"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3adf8e0-9ab5-4e31-b1b8-57af1b0161ef"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""ActionSecond"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a16584e-70f6-4d2e-b8f4-dbaedec7f272"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KM"",
            ""bindingGroup"": ""KM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // KM
        m_KM = asset.FindActionMap("KM", throwIfNotFound: true);
        m_KM_VerticalAxis = m_KM.FindAction("VerticalAxis", throwIfNotFound: true);
        m_KM_HorizontalAxis = m_KM.FindAction("HorizontalAxis", throwIfNotFound: true);
        m_KM_Escape = m_KM.FindAction("Escape", throwIfNotFound: true);
        m_KM_ActionMain = m_KM.FindAction("ActionMain", throwIfNotFound: true);
        m_KM_ActionSecond = m_KM.FindAction("ActionSecond", throwIfNotFound: true);
        m_KM_Attack = m_KM.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KM
    private readonly InputActionMap m_KM;
    private List<IKMActions> m_KMActionsCallbackInterfaces = new List<IKMActions>();
    private readonly InputAction m_KM_VerticalAxis;
    private readonly InputAction m_KM_HorizontalAxis;
    private readonly InputAction m_KM_Escape;
    private readonly InputAction m_KM_ActionMain;
    private readonly InputAction m_KM_ActionSecond;
    private readonly InputAction m_KM_Attack;
    public struct KMActions
    {
        private @InputActions m_Wrapper;
        public KMActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @VerticalAxis => m_Wrapper.m_KM_VerticalAxis;
        public InputAction @HorizontalAxis => m_Wrapper.m_KM_HorizontalAxis;
        public InputAction @Escape => m_Wrapper.m_KM_Escape;
        public InputAction @ActionMain => m_Wrapper.m_KM_ActionMain;
        public InputAction @ActionSecond => m_Wrapper.m_KM_ActionSecond;
        public InputAction @Attack => m_Wrapper.m_KM_Attack;
        public InputActionMap Get() { return m_Wrapper.m_KM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KMActions set) { return set.Get(); }
        public void AddCallbacks(IKMActions instance)
        {
            if (instance == null || m_Wrapper.m_KMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KMActionsCallbackInterfaces.Add(instance);
            @VerticalAxis.started += instance.OnVerticalAxis;
            @VerticalAxis.performed += instance.OnVerticalAxis;
            @VerticalAxis.canceled += instance.OnVerticalAxis;
            @HorizontalAxis.started += instance.OnHorizontalAxis;
            @HorizontalAxis.performed += instance.OnHorizontalAxis;
            @HorizontalAxis.canceled += instance.OnHorizontalAxis;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @ActionMain.started += instance.OnActionMain;
            @ActionMain.performed += instance.OnActionMain;
            @ActionMain.canceled += instance.OnActionMain;
            @ActionSecond.started += instance.OnActionSecond;
            @ActionSecond.performed += instance.OnActionSecond;
            @ActionSecond.canceled += instance.OnActionSecond;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IKMActions instance)
        {
            @VerticalAxis.started -= instance.OnVerticalAxis;
            @VerticalAxis.performed -= instance.OnVerticalAxis;
            @VerticalAxis.canceled -= instance.OnVerticalAxis;
            @HorizontalAxis.started -= instance.OnHorizontalAxis;
            @HorizontalAxis.performed -= instance.OnHorizontalAxis;
            @HorizontalAxis.canceled -= instance.OnHorizontalAxis;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @ActionMain.started -= instance.OnActionMain;
            @ActionMain.performed -= instance.OnActionMain;
            @ActionMain.canceled -= instance.OnActionMain;
            @ActionSecond.started -= instance.OnActionSecond;
            @ActionSecond.performed -= instance.OnActionSecond;
            @ActionSecond.canceled -= instance.OnActionSecond;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IKMActions instance)
        {
            if (m_Wrapper.m_KMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKMActions instance)
        {
            foreach (var item in m_Wrapper.m_KMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KMActions @KM => new KMActions(this);
    private int m_KMSchemeIndex = -1;
    public InputControlScheme KMScheme
    {
        get
        {
            if (m_KMSchemeIndex == -1) m_KMSchemeIndex = asset.FindControlSchemeIndex("KM");
            return asset.controlSchemes[m_KMSchemeIndex];
        }
    }
    public interface IKMActions
    {
        void OnVerticalAxis(InputAction.CallbackContext context);
        void OnHorizontalAxis(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnActionMain(InputAction.CallbackContext context);
        void OnActionSecond(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
